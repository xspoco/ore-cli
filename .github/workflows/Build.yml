name: Build

on:
  push:
    branches: ["master"]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: ore

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: false

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - id: version
        run: echo "version=$(cargo metadata --no-deps --quiet --color never | jq -r '.packages[].version')-$(git describe --always --dirty=_modified)" >> "$GITHUB_OUTPUT"

  build:
    name: Build
    needs: version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Rust
        run: rustup target add ${{ matrix.target }}
      - name: Configure cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: release-${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Lint
        run: cargo fmt --check
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      - name: Strip binary
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          strip="strip"
          case "${{ matrix.target }}" in
            x86_64-unknown-linux-gnu)
              strip=strip
              ;;
          esac
          ${strip} target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}
      - name: Package (unix)
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          rm -rf target/dist
          mkdir target/dist
          cd target/${{ matrix.target }}/release
          cp ${{ env.BINARY_NAME }} ../../dist/${{ env.BINARY_NAME }}-${{ needs.version.outputs.version }}-${{ matrix.target }}
      - name: Package (windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          if (Test-Path target/dist) { rm -Recurse -Force target/dist }
          mkdir target/dist
          cd target/${{ matrix.target }}/release
          cp "${{ env.BINARY_NAME }}.exe" "../../dist/${{ env.BINARY_NAME }}-${{ needs.version.outputs.version }}-${{ matrix.target }}.exe"
      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ needs.version.outputs.version }}-${{ matrix.target }}
          path: target/dist/*
